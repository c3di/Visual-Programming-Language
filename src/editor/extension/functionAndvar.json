{
  "description": "A library for creating variables and functions",
  "enable": true,
  "nodes": {
    "new variable": {
      "type": "new variable",
      "category": "createVariable",
      "title": "new variable",
      "tooltip": "Create a new variable",
      "codeGenerator": "function code(inputs, outputs, node, generator) {  \r\n  let code = `${inputs[1]} =`;\r\n  if(inputs[2] === '')\r\n    code = code +  ' None'\r\n  else\r\n    code = code +  ` ${inputs[2]}`\r\n  code = code + `\\n${outputs[0]}`;\r\n  return code;\r\n}",
      "inputs": {
        "execIn": {
          "dataType": "exec",
          "tooltip": "exec in"
        },
        "name": {
          "title": "name",
          "tooltip": "name of the variable",
          "dataType": "anyDataType"
        },
        "value": {
          "title": "value",
          "tooltip": "value of the variable",
          "dataType": "anyDataType"
        }
      },
      "outputs": {
        "execOut": {
          "dataType": "exec"
        }
      }
    },

    "setter": {
      "notShowInMenu": true,
      "type": "setter",
      "category": "setter",
      "codeGenerator": "function code(inputs, outputs, node, generator) {  \r\n  let code = `${node.data.inputs['setter'].title} = ${inputs[1]}\r\n${outputs[1]} = ${node.data.inputs['setter'].title}\r\n${outputs[0]}`;\r\n  return code;\r\n}"
    },

    "getter": {
      "notShowInMenu": true,
      "type": "getter",
      "category": "getter",
      "tooltip": "Return the value",
      "codeGenerator": "function code(inputs, outputs, node, generator) {  \r\n  let code = `${outputs[0]} = ${node.data.outputs['getter'].title}`;\r\n  return code;\r\n}",
      "outputs": {
        "getter": {}
      }
    },

    "new function": {
      "type": "new function",
      "category": "createFunction",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\n  let code = `def ${node.data.title}(${(outputs.slice(1)).join(', ')}):\\n`;\n  return code + generator.indentLines(outputs[0] === ''?'pass':outputs[0])\n}",
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec"
        }
      }
    },
    "function call": {
      "notShowInMenu": true,
      "type": "function call",
      "category": "functionCall",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\n  let code = '';\n  const returns = outputs.slice(1);\n  code = code + returns.join(', ') + `${returns.length===0? \"\":\" = \"}`\n  const args = inputs.slice(1);\n  code = code + `${node.data.title}(` + `${args.length===0? '':args.join(', ')}` +')' + `\\n${outputs[0]}`\n  return code;\n}"
    },
    "return": {
      "title": "return",
      "type": "return",
      "category": "return",
      "showLabel": true,
      "tooltip": "return",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\n  const values = inputs.slice(1)\n  if(values.length === 0)\n    return 'return'\n  return `return ${values.join(', ')}`\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec"
        }
      }
    }
  }
}
