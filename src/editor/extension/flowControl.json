{
  "description": "Flow control nodes are used to control the execution order of a program. They include sequence, for loop, if, and other nodes that can alter the flow based on conditions or iterations. ",
  "enable": true,
  "nodes": {
    "main": {
      "type": "main",
      "category": "function",
      "title": "main",
      "tooltip": "The execute entry point of the program",
      "codeGenerator": "function code(inputs, outputs, options, generator) {\n    return `${outputs[0]}`;\n}",
      "outputs": {
        "execOut": {
          "tooltip": "exec out",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        }
      }
    },
    "sequence": {
      "type": "sequence",
      "category": "sequence",
      "title": "sequence",
      "tooltip": "Execute a series of nodes in order",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "tooltip": "execIn",
          "dataType": "exec"
        }
      },
      "outputs": {
        "execOut0": {
          "title": "Then 0",
          "tooltip": "Then 0",
          "dataType": "exec",
          "deletable": true
        },
        "execOut1": {
          "title": "Then 1",
          "tooltip": "Then 1",
          "dataType": "exec",
          "deletable": true
        }
      },
      "codeGenerator": "function code(inputs, outputs, node, generator) {\n  return `${outputs.filter(str => str !== '').join('\\n')}`;\n}"
    },
    "if else": {
      "type": "if else",
      "category": "function",
      "title": "if else",
      "tooltip": "If-Else Statement. If Condition is true, execution goes to True, otherwise it goes to False",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "tooltip": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "condition": {
          "title": "Condition",
          "tooltip": "condition",
          "dataType": "boolean",
          "defaultValue": true
        }
      },
      "outputs": {
        "true": {
          "title": "true",
          "tooltip": "True",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": true
        },
        "false": {
          "title": "false",
          "tooltip": "False",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": true
        }
      },
      "codeGenerator": "function code(inputs, outputs, node, generator) {\n    let code = `if ${inputs[1]}:\\n${generator.indentLines(outputs[0] !== '' ? outputs[0] : 'pass')}`;\n    if (outputs[1] !== '')\n        code = `${code}\\nelse:\\n${generator.indentLines(outputs[1])}`;\n    return code;\n}"
    },
    "for each loop": {
      "type": "for each loop",
      "category": "function",
      "title": "for each loop",
      "tooltip": "Executes LoopBody for each element in Array",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "tooltip": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "list": {
          "title": "list1",
          "tooltip": "List",
          "dataType": "list",
          "showWidget": false,
          "showTitle": true
        }
      },
      "outputs": {
        "loopBody": {
          "title": "loop body",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": true,
          "tooltip": "Exec Out"
        },
        "index": {
          "title": "index",
          "dataType": "integer",
          "showWidget": false,
          "showTitle": true
        },
        "element": {
          "title": "element",
          "tooltip": "Array Element",
          "dataType": "anyDataType",
          "showWidget": false,
          "showTitle": true
        },
        "complete": {
          "title": "completed",
          "tooltip": "exec out",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": true
        }
      },
      "codeGenerator": "function code(inputs, outputs, node, generator) {\n    return `for ${outputs[1]}, ${outputs[2]} in enumerate(${inputs[1] !== '' ? inputs[1] : '[]'}):\\n${generator.indentLines(outputs[0] !== '' ? outputs[0] : 'pass')}${'\\n'.repeat(Number(outputs[3] !== '')) + outputs[3]}`;\n}"
    },
    "for loop": {
      "type": "for loop",
      "category": "function",
      "title": "for loop",
      "tooltip": "Executes LoopBody for each Index from StartIndex to StopIndex, inclusive",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "tooltip": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "first Index": {
          "title": "first index",
          "tooltip": "First Index",
          "dataType": "integer",
          "defaultValue": 0
        },
        "last index": {
          "title": "Last Index",
          "tooltip": "Last Index",
          "dataType": "integer",
          "defaultValue": 0
        }
      },
      "outputs": {
        "loopBody": {
          "title": "Loop Body",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": true,
          "tooltip": "Exec Out"
        },
        "index": {
          "title": "index",
          "dataType": "integer",
          "showWidget": false,
          "showTitle": true
        },
        "complete": {
          "title": "completed",
          "tooltip": "exec out",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": true
        }
      },
      "codeGenerator": "function code(inputs, outputs, node, generator) {\n    return `for ${outputs[1]} in range(${inputs[1]}, ${inputs[2]}):\\n${generator.indentLines(outputs[0] !== '' ? outputs[0] : 'pass')}${'\\n'.repeat(Number(outputs[2] !== '')) + outputs[2]}`;\n}"
    }
  }
}
