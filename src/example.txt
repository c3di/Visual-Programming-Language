{"hasNodes":true,"nodes":{"0":{"width":100,"height":74,"id":"0","type":"function","position":{"x":-202.56519164974839,"y":84.49354349221375},"data":{"title":"Execute Start","tooltip":"The execute start point of the program","inputs":{},"outputs":{"execOut":{"tooltip":"exec out","dataType":"exec","showWidget":false,"showTitle":false,"connection":1}},"configType":"Flow Control.Execute Start","sourceCode":"{{{outputs.0}}}"},"selected":true,"positionAbsolute":{"x":-202.56519164974839,"y":84.49354349221375},"$H":277,"dragging":false},"1":{"width":259,"height":124,"id":"1","type":"function","position":{"x":-8.17078079786512,"y":84.76851800688702},"data":{"title":"read_image","tooltip":"Reads a JPEG or PNG image into a 3 dimensional RGB or grayscale Tensor. Optionally converts the image to the desired format. The values of the output tensor are uint8 in [0, 255].","inputs":{"execIn":{"title":"execIn","tooltip":"execIn","dataType":"exec","showWidget":false,"showTitle":false,"connection":1},"path":{"title":"path","dataType":"string","tooltip":"path(str) - path of the JPEG or PNG image.","value":"Getty.jpg"},"mode":{"title":"mode","dataType":"imageio.ImageReadMode","default":"ImageReadMode.UNCHANGED","tooltip":"mode(ImageReadMode) - The read mode used for optionally converting the image. Default: ImageReadMode.UNCHANGED."}},"outputs":{"execOut":{"title":"execOut","tooltip":"execOut","dataType":"exec","showWidget":false,"showTitle":false,"connection":1},"image":{"title":"image","dataType":"torch.tensor","tooltip":"image (Tensor[image_channels, image_height, image_width]) uint8 in [0, 255]","connection":2}},"configType":"imageio.read_image","externalImports":"from torchvision import io\nfrom torchvision.io import ImageReadMode","functionName":"io.read_image"},"positionAbsolute":{"x":-8.17078079786512,"y":84.76851800688702},"selected":true,"dragging":false,"$H":281},"2":{"width":234,"height":174,"id":"2","type":"function","position":{"x":646.2690465559552,"y":85.79535718347817},"data":{"title":"show_image","tooltip":"Takes an input tensor in CHW layout and display it as an image","inputs":{"execIn":{"title":"execIn","tooltip":"execIn","dataType":"exec","showWidget":false,"showTitle":false,"connection":1},"image":{"title":"image","dataType":"numpy.ndarray","tooltip":"numpy.ndarray[image_height, image_width] | numpy.ndarray[image_height, image_width, 3] | numpy.ndarray[image_height, image_width, 4]","connection":1},"title":{"title":"title","dataType":"string","defaultValue":"","tooltip":"title - A title to be set for the image. Default: None.","value":"raw"},"cmap":{"title":"cmap","dataType":"string","defaultValue":"viridis","tooltip":"cmap(str, optional) - The registered colormap name in matplotlib used to map scalar data to colors. This parameter is ignored if X is RGB(A)."},"figSize":{"title":"figSize","dataType":"tuple","defaultValue":"(9, 5)","tooltip":"figSize 2-tuple of floats, default: (9, 5) - Figure dimension (width, height) in inches"}},"outputs":{"execOut":{"title":"execOut","tooltip":"execOut","dataType":"exec","showWidget":false,"showTitle":false,"connection":1}},"configType":"image visualization.show_image","sourceCode":"{{indent}}def show_image(img, title=None, cmap=None, figSize=(9, 5)):\n    plt.figure(figsize=figSize)\n    plt.imshow(img, cmap=cmap)\n    plt.title(title)\n    plt.axis('off')\n    plt.show()\n{{indent}}show_image({{{inputs.1}}}, {{{inputs.2}}}, {{{inputs.3}}}, {{{inputs.4}}})\n{{{outputs.1}}}","externalImports":"from matplotlib import pyplot as plt"},"positionAbsolute":{"x":646.2690465559552,"y":85.79535718347817},"selected":true,"dragging":false,"$H":288},"3":{"width":203,"height":45,"id":"3","type":"math","position":{"x":349.53589559564915,"y":32.634500075882926},"data":{"title":"->","tooltip":"to numpy","inputs":{"tensor":{"title":"tensor","dataType":"torch.tensor","showTitle":true,"connection":1}},"outputs":{"ndarray":{"title":"ndarray","dataType":"numpy.ndarray","showTitle":true,"connection":1}},"configType":"torch.to numpy","sourceCode":"{{indent}}{{{outputs.0}}} = {{{inputs.0}}}.numpy()"},"positionAbsolute":{"x":349.53589559564915,"y":32.634500075882926},"selected":true,"dragging":false,"$H":296},"4":{"width":318,"height":249,"id":"4","type":"function","position":{"x":619.0826175517683,"y":352.68364596401574},"data":{"title":"canny edge detection","tooltip":"Find edges of the input image and filters them using the Canny algorithm.","inputs":{"execIn":{"title":"execIn","dataType":"exec","showWidget":false,"showTitle":false,"connection":1},"input":{"title":"input","dataType":"torch.tensor","tooltip":"input image tensor with shape (B, C, H, W) and intensity from (0, 1].","connection":1},"low_threshold":{"title":"low_threshold","dataType":"float","defaultValue":"0.1","tooltip":"lower threshold for the hysteresis procedure."},"high_threshold":{"title":"high_threshold","dataType":"float","defaultValue":"0.2","tooltip":"upper threshold for the hysteresis procedure."},"kernel_size":{"title":"kernel_size","dataType":"tuple","defaultValue":"(5, 5)","tooltip":"the size of the kernel for the gaussian blur."},"sigma":{"title":"sigma","dataType":"tuple","defaultValue":"(1, 1)","tooltip":"the standard deviation of the kernel for the gaussian blur."},"hysteresis":{"title":"hysteresis","dataType":"boolean","defaultValue":"true","tooltip":"if True, applies the hysteresis edge tracking. Otherwise, the edges are divided between weak (0.5) and strong (1) edges. Default: True"},"eps":{"title":"eps","dataType":"float","defaultValue":"1e-6","tooltip":"regularization number to avoid NaN during backprop."}},"outputs":{"execOut":{"title":"execOut","dataType":"exec","showWidget":false,"showTitle":false,"connection":1},"output":{"title":"output","dataType":"torch.tensor","defaultValue":"","tooltip":"torch tensor (the canny edge magnitudes map with shape of (B, 1, H, W))","connection":1}},"configType":"Kornia.filters.Canny","sourceCode":"{{indent}}{{{outputs.1}}} = K.filters.canny({{{inputs.1}}}, {{{inputs.2}}},{{{inputs.3}}}, {{{inputs.4}}},{{{inputs.5}}}, {{{inputs.6}}},{{{inputs.7}}})\n{{indent}}{{{outputs.1}}} = {{{outputs.1}}}[0]\n{{{outputs.0}}}","externalImports":"import kornia as K"},"positionAbsolute":{"x":619.0826175517683,"y":352.68364596401574},"selected":true,"dragging":false,"$H":300},"5":{"width":255,"height":124,"id":"5","type":"function","position":{"x":294.099959487222,"y":354.5999440371649},"data":{"title":"unsqueeze","tooltip":"Returns a new tensor with a dimension of size one inserted at the specified position.","inputs":{"execIn":{"title":"execIn","dataType":"exec","showWidget":false,"showTitle":false,"connection":1},"input":{"title":"input","dataType":"torch.tensor","connection":1},"dim":{"title":"dim","dataType":"integer","defaultValue":"0"}},"outputs":{"execOut":{"title":"execOut","dataType":"exec","showWidget":false,"showTitle":false,"connection":1},"output":{"title":"output","dataType":"torch.tensor","connection":1}},"configType":"torch.unsqueeze","sourceCode":"{{indent}}{{{outputs.1}}} = torch.unsqueeze({{{inputs.1}}}, {{{inputs.2}}})\n{{{outputs.0}}}","externalImports":"import torch"},"positionAbsolute":{"x":294.099959487222,"y":354.5999440371649},"selected":true,"dragging":false,"$H":312},"6":{"width":218,"height":66,"id":"6","type":"math","position":{"x":315.1678709647868,"y":488.8762221476919},"data":{"title":"/","tooltip":"Tensor Divide by a scalar","inputs":{"tensor":{"title":"tensor","dataType":"torch.tensor","connection":1},"float":{"title":"float","dataType":"float","defaultValue":"1.0","value":255}},"outputs":{"output":{"title":"tensor","dataType":"torch.tensor","connection":1}},"configType":"torch.Tensor / Float","sourceCode":"{{indent}}{{{outputs.0}}} = {{{inputs.0}}}/{{{inputs.1}}}"},"positionAbsolute":{"x":315.1678709647868,"y":488.8762221476919},"selected":true,"dragging":false,"$H":319},"7":{"width":234,"height":174,"id":"7","type":"function","position":{"x":1246.4658463468804,"y":350.3335165149988},"data":{"title":"show_image","tooltip":"Takes an input tensor in CHW layout and display it as an image","inputs":{"execIn":{"title":"execIn","tooltip":"execIn","dataType":"exec","showWidget":false,"showTitle":false,"connection":1},"image":{"title":"image","dataType":"numpy.ndarray","tooltip":"numpy.ndarray[image_height, image_width] | numpy.ndarray[image_height, image_width, 3] | numpy.ndarray[image_height, image_width, 4]","connection":1},"title":{"title":"title","dataType":"string","defaultValue":"","tooltip":"title - A title to be set for the image. Default: None.","value":"edge"},"cmap":{"title":"cmap","dataType":"string","defaultValue":"viridis","tooltip":"cmap(str, optional) - The registered colormap name in matplotlib used to map scalar data to colors. This parameter is ignored if X is RGB(A).","value":"gray"},"figSize":{"title":"figSize","dataType":"tuple","defaultValue":"(9, 5)","tooltip":"figSize 2-tuple of floats, default: (9, 5) - Figure dimension (width, height) in inches"}},"outputs":{"execOut":{"title":"execOut","tooltip":"execOut","dataType":"exec","showWidget":false,"showTitle":false}},"configType":"image visualization.show_image","sourceCode":"{{indent}}def show_image(img, title=None, cmap=None, figSize=(9, 5)):\n    plt.figure(figsize=figSize)\n    plt.imshow(img, cmap=cmap)\n    plt.title(title)\n    plt.axis('off')\n    plt.show()\n{{indent}}show_image({{{inputs.1}}}, {{{inputs.2}}}, {{{inputs.3}}}, {{{inputs.4}}})\n{{{outputs.1}}}","externalImports":"from matplotlib import pyplot as plt"},"positionAbsolute":{"x":1246.4658463468804,"y":350.3335165149988},"selected":true,"dragging":false,"$H":324},"8":{"width":203,"height":45,"id":"8","type":"math","position":{"x":995.5177788941206,"y":500.75618514855904},"data":{"title":"->","tooltip":"to numpy","inputs":{"tensor":{"title":"tensor","dataType":"torch.tensor","showTitle":true,"connection":1}},"outputs":{"ndarray":{"title":"ndarray","dataType":"numpy.ndarray","showTitle":true,"connection":1}},"configType":"torch.to numpy","sourceCode":"{{indent}}{{{outputs.0}}} = {{{inputs.0}}}.numpy()"},"positionAbsolute":{"x":995.5177788941206,"y":500.75618514855904},"selected":true,"$H":332,"dragging":false},"9":{"width":344,"height":66,"id":"9","type":"math","position":{"x":990.1788801409008,"y":567.3812673647074},"data":{"title":"get","dataType":"numpy.ndarray","tooltip":"ndarray index","inputs":{"input":{"dataType":"numpy.ndarray","defaultValue":"","title":"ndarray","showTitle":true,"connection":1,"value":""},"index":{"dataType":"list","title":"index(es)","defaultValue":"[]","showTitle":true,"value":"[0, 0]"}},"outputs":{"element":{"dataType":"numpy.ndarray","defaultValue":"","title":"element","showTitle":true,"connection":1}},"configType":"numpy.get","sourceCode":"{{indent}}{{{outputs.0}}}={{{inputs.0}}}{{{inputs.1}}}"},"positionAbsolute":{"x":990.1788801409008,"y":567.3812673647074},"selected":true,"dragging":false,"$H":336},"12":{"width":355,"height":185,"id":"12","type":"comment","dragHandle":".node__header--enabled","zIndex":-1001,"data":{"comment":"tensor.torch, channel last, 0-255, not batched, (C*H*W)","width":355,"height":185,"configType":"comment","defaultEditable":false},"position":{"x":-49.80117580466367,"y":55.26851800688702},"selected":true,"positionAbsolute":{"x":-49.80117580466367,"y":55.26851800688702},"dragging":false,"style":{"width":355,"height":185},"resizing":false},"13":{"width":342,"height":235,"id":"13","type":"comment","dragHandle":".node__header--enabled","zIndex":-1001,"data":{"comment":"numpy.ndarray,  rgb, channel laste, not batched (H*W*3))","width":342,"height":235,"configType":"comment","defaultEditable":false},"position":{"x":589.1090081359309,"y":55.66408261441542},"selected":true,"positionAbsolute":{"x":589.1090081359309,"y":55.66408261441542},"dragging":false,"style":{"width":342,"height":235},"resizing":false},"14":{"width":260,"height":124,"id":"14","type":"function","position":{"x":319.9474489972816,"y":84.84885586295572},"data":{"title":"transpose","tooltip":"Returns an array with axes transposed.","inputs":{"execIn":{"title":"execIn","dataType":"exec","showWidget":false,"showTitle":false,"connection":1},"input":{"title":"input","dataType":"numpy.ndarray","connection":1},"axes":{"title":"axes","dataType":"tuple","defaultValue":"()","value":"(1, 2, 0)"}},"outputs":{"execOut":{"title":"execOut","dataType":"exec","showWidget":false,"showTitle":false,"connection":1},"output":{"title":"output","dataType":"numpy.ndarray","connection":1}},"configType":"numpy.transpose","externalImports":"import numpy as np","functionName":"np.transpose"},"positionAbsolute":{"x":319.9474489972816,"y":84.84885586295572},"selected":true,"dragging":false},"15":{"width":379,"height":310,"id":"15","type":"comment","dragHandle":".node__header--enabled","zIndex":-1001,"data":{"comment":"torch.tensor, rgb, channel first, 0-1, batched, (1*C*H*C)","width":378,"height":309,"configType":"comment","defaultEditable":false},"position":{"x":589.0826175517683,"y":322.68364596401574},"selected":true,"positionAbsolute":{"x":589.0826175517683,"y":322.68364596401574},"dragging":false},"16":{"width":295,"height":235,"id":"16","type":"comment","dragHandle":".node__header--enabled","zIndex":-1001,"data":{"comment":"numpy.ndarray, grayscale, not batched, (H*W)","width":294.0000000000002,"height":234,"configType":"comment","defaultEditable":false},"position":{"x":1216.4658463468804,"y":320.3335165149988},"selected":true,"positionAbsolute":{"x":1216.4658463468804,"y":320.3335165149988},"dragging":false}},"edges":[{"source":"0","target":"1","sourceHandle":"execOut","targetHandle":"execIn","markerEnd":{"type":"arrow","width":15,"height":15,"color":""},"data":{"dataType":"exec"},"style":{"strokeWidth":2,"stroke":"hsl(0, 0%, 0%)"},"id":"reactflow__edge-0execOut-1execIn","selected":true},{"source":"1","target":"3","sourceHandle":"image","targetHandle":"tensor","data":{"dataType":"torch.tensor"},"style":{"strokeWidth":2,"stroke":"hsl(10, 50%, 60%)"},"id":"reactflow__edge-1image-3tensor","selected":true},{"source":"5","sourceHandle":"execOut","target":"4","targetHandle":"execIn","markerEnd":{"type":"arrow","width":15,"height":15,"color":""},"data":{"dataType":"exec"},"style":{"strokeWidth":2,"stroke":"hsl(0, 0%, 0%)"},"id":"reactflow__edge-5execOut-4execIn","selected":true},{"source":"5","target":"6","sourceHandle":"output","targetHandle":"tensor","data":{"dataType":"torch.tensor"},"style":{"strokeWidth":2,"stroke":"hsl(10, 50%, 60%)"},"id":"reactflow__edge-5output-6tensor","selected":true},{"source":"6","sourceHandle":"output","target":"4","targetHandle":"input","data":{"dataType":"torch.tensor"},"style":{"strokeWidth":2,"stroke":"hsl(10, 50%, 60%)"},"id":"reactflow__edge-6output-4input","selected":true},{"source":"4","target":"7","sourceHandle":"execOut","targetHandle":"execIn","markerEnd":{"type":"arrow","width":15,"height":15,"color":""},"data":{"dataType":"exec"},"style":{"strokeWidth":2,"stroke":"hsl(0, 0%, 0%)"},"id":"reactflow__edge-4execOut-7execIn","selected":true},{"source":"4","target":"8","sourceHandle":"output","targetHandle":"tensor","data":{"dataType":"torch.tensor"},"style":{"strokeWidth":2,"stroke":"hsl(10, 50%, 60%)"},"id":"reactflow__edge-4output-8tensor","selected":true},{"source":"8","target":"9","sourceHandle":"ndarray","targetHandle":"input","data":{"dataType":"numpy.ndarray"},"style":{"strokeWidth":2,"stroke":"hsl(60, 50%, 60%)"},"id":"reactflow__edge-8ndarray-9input","selected":true},{"source":"9","sourceHandle":"element","target":"7","targetHandle":"image","data":{"dataType":"numpy.ndarray"},"style":{"strokeWidth":2,"stroke":"hsl(60, 50%, 60%)"},"id":"reactflow__edge-9element-7image","selected":true},{"source":"1","target":"14","sourceHandle":"execOut","targetHandle":"execIn","markerEnd":{"type":"arrow","width":15,"height":15,"color":""},"data":{"dataType":"exec"},"style":{"strokeWidth":2,"stroke":"hsl(0, 0%, 0%)"},"id":"reactflow__edge-1execOut-14execIn","selected":true},{"source":"14","sourceHandle":"execOut","target":"2","targetHandle":"execIn","markerEnd":{"type":"arrow","width":15,"height":15,"color":""},"data":{"dataType":"exec"},"style":{"strokeWidth":2,"stroke":"hsl(0, 0%, 0%)"},"id":"reactflow__edge-14execOut-2execIn","selected":true},{"source":"14","sourceHandle":"output","target":"2","targetHandle":"image","data":{"dataType":"numpy.ndarray"},"style":{"strokeWidth":2,"stroke":"hsl(60, 50%, 60%)"},"id":"reactflow__edge-14output-2image","selected":true},{"source":"3","sourceHandle":"ndarray","target":"14","targetHandle":"input","data":{"dataType":"numpy.ndarray"},"style":{"strokeWidth":2,"stroke":"hsl(60, 50%, 60%)"},"id":"reactflow__edge-3ndarray-14input","selected":true},{"source":"1","sourceHandle":"image","target":"5","targetHandle":"input","data":{"dataType":"torch.tensor"},"style":{"strokeWidth":2,"stroke":"hsl(10, 50%, 60%)"},"id":"reactflow__edge-1image-5input","selected":true},{"source":"2","sourceHandle":"execOut","target":"5","targetHandle":"execIn","markerEnd":{"type":"arrow","width":15,"height":15,"color":""},"data":{"dataType":"exec"},"style":{"strokeWidth":2,"stroke":"hsl(0, 0%, 0%)"},"id":"reactflow__edge-2execOut-5execIn","selected":true}],"minX":-202.56519164974839,"minY":32.634500075882926}