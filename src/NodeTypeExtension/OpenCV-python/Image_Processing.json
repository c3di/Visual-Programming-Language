{
  "enable": true,
  "nodes": {
    "buildPyramid": {
      //a collection of images
      "type": "buildPyramid",
      "category": "function",
      "title": "build pyramiid",
      "tooltip": " TConstructs the Gaussian pyramid for an image.",
      "externalImports": "import cv2 as cv",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  const code = `${output[1]} = cv2.buildPyramid(${inputs[1]}['value'], ${inputs.slice(2).join(', ')})\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]}[0],\r\n  'dataType': 'numpy.ndarray',\r\n  'metadata': {\n    'ColorChannel': 'rgb',\n    'isMiniBatched': False\n  }\n}\n${outputs[0]}`;\n  return code;\n}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.array",
            "metadata": []
          },
          "tooltip": "Source image in numpy array format"
        },
        "maxlevel": {
          "title": "maxlevel",
          "dataType": "int",
          "defaultValue": 3,
          "tooltip": "0-based index of the last pyramid layer. Must be non-negative."
        },
        "borderType": {
          "title": "borderType",
          "dataType": "int",
          "defaultValue": "cv2.BORDER_DEFAULT",
          "tooltip": "Pixel extrapolation method, excluding BORDER_CONSTANT"
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "pyramid": {
          "title": "pyramid",
          "dataType": "list",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "List of pyramid layers"
        }
      }
    },

    "Filter2D": {
      "type": "Filter2D",
      "category": "function",
      "title": "filter 2D",
      "tooltip": "Convolves an image with the kernel.",
      "externalImports": "import cv2 as cv",
      "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  const code = `${outputs[1]} = cv2.filter2D(${inputs[1]}, ${inputs[2]}, ${inputs[3]}${inputs[4] !== '-1, -1' ? ', anchor=' + inputs[4] : ''}${inputs[5] !== undefined ? ', delta=' + inputs[5] : ''}${inputs[6] !== undefined ? ', borderType=' + inputs[6] : ''})\r\n${outputs[1]} = {\n  'value': ${outputs[1]},\n  'dataType': 'numpy.ndarray',\n  'metadata': {\n    'colorChannel': 'bgr',\n    'channelOrder': 'channelLast',\n    'isMiniBatched': False,\n    'intensityRange': '0-255',\n    'device': 'cpu'\n  }\n}\n${outputs[0]}`;\n  return code;\n}",
  "inputs": {
    "execIn": {
      "title": "execIn",
      "dataType": "exec",
      "showWidget": false,
      "showTitle": false
    },
    "image": {
      "title": "image",
      "dataType": "image",
      "defaultValue": {
        "dataType": "numpy.ndarray",
        "metadata": [
              {
                "colorChannel": "bgr",
                "isMiniBatched": [
                  true,
                  false
                ],
                "channelOrder": "channelLast",
                "intensityRange": [
                  "0-255"
                ],
                "device": [
                  "cpu"
                ]
              }
            ]
      },
      "tooltip": "input image."
    },
    "ddepth": {
      "title": "ddepth",
      "dataType": "int",
      "defaultValue": -1,
      "tooltip": "Desired depth of the destination image"
    },
    "kernel": {
      "title": "kernel",
      "dataType": "numpy.array",
      "defaultValue": {
        "dataType": "numpy.array",
        "metadata": []
      },
      "tooltip": "Convolution kernel (or correlation kernel)"
    },
    "anchor": {
      "title": "anchor",
      "dataType": "point",
      "defaultValue": "-1, -1",
      "tooltip": "Anchor of the kernel within the kernel. Use '-1, -1' for default."
    },
    "delta": {
      "title": "delta",
      "dataType": "float",
      "defaultValue": 0.0,
      "tooltip": "Optional value added to the filtered pixels. Leave undefined for default."
    },
    "borderType": {
      "title": "borderType",
      "dataType": "int",
      "defaultValue": "cv2.BORDER_DEFAULT",
      "tooltip": "Pixel extrapolation method. Leave undefined for default."
    }
  },
  "outputs": {
    "execOut": {
      "title": "execOut",
      "dataType": "exec",
      "showWidget": false,
      "showTitle": false
    },
    "dst": {
      "title": "dst",
      "dataType": "image",
      "defaultValue": {
        "dataType": "numpy.array"
      },
      "tooltip": "Output image with applied filter"
    }
  }
}

    "Simple_Thresholding": {
      "type": "Simple_Thresholding",
      "category": "function",
      "title": "simple thresholding",
      "tooltip": "Applies a fixed-level threshold to each array element.",
      "externalImports": "import cv2 as cv",
      "sourceCode": "{{indent}}{{{outputs.1}}} =  cv.threshold({{{inputs.1}}},{{{inputs.2}}},{{{inputs.3}}},{{{inputs.4}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'rgb', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-255', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image"
        },
        "thresh": {
          "title": "thresh",
          "dataType": "integer",
          "defaultValue": 127,
          "tooltip": "Threshold value."
        },
        "maxval": {
          "title": "maxval",
          "dataType": "integer",
          "defaultValue": 255,
          "tooltip": "Maximum value to use with the THRESH_BINARY and THRESH_BINARY_INV thresholding types."
        },
        "type": {
          "title": "type",
          "dataType": "string",
          "defaultValue": "cv.THRESH_BINARY",
          "tooltip": "Thresholding type: {'cv.THRESH_BINARY', 'cv.THRESH_BINARY_INV', 'THRESH_TRUNC ','THRESH_TOZERO','THRESH_TOZERO_INV'}"
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "thresh": {
          "title": "thresh",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Threshold value we used."
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": " Thresholded image."
        }
      }
    },
    "Adaptive_Thresholding": {
      "type": "Adaptive_Thresholding",
      "category": "function",
      "title": "adaptive thresholding",
      "tooltip": "Applies an adaptive threshold to an array.",
      "externalImports": "import cv2 as cv",
      "sourceCode": "{{indent}}{{{outputs.1}}} =  cv.adaptiveThreshold({{{inputs.1}}},{{{inputs.2}}},{{{inputs.3}}},{{{inputs.4}}},{{{inputs.5}}},{{{inputs.6}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'rgb', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-255', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image"
        },
        "maxValue": {
          "title": "maxValue",
          "dataType": "integer",
          "defaultValue": 255,
          "tooltip": "Maximum value to use with the THRESH_BINARY and THRESH_BINARY_INV thresholding types."
        },
        "adaptiveMethod": {
          "title": "adaptiveMethod",
          "dataType": "string",
          "defaultValue": "cv.ADAPTIVE_THRESH_MEAN_C",
          "tooltip": "Adaptive thresholding type: {'cv.ADAPTIVE_THRESH_MEAN_C', 'cv.ADAPTIVE_THRESH_GAUSSIAN_C'}"
        },
        "thresholdType": {
          "title": "thresholdType",
          "dataType": "string",
          "defaultValue": "cv.THRESH_BINARY",
          "tooltip": "Thresholding type that must be either cv.THRESH_BINARY or cv.THRESH_BINARY_INV,"
        },
        "blockSize": {
          "title": "blockSize",
          "dataType": "integer",
          "defaultValue": 11,
          "tooltip": "Size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, and so on."
        },
        "C": {
          "title": "C",
          "dataType": "integer",
          "defaultValue": 2,
          "tooltip": "Constant subtracted from the mean or weighted mean (see the details below). Normally, it is positive but may be zero or negative as well."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "thresh": {
          "title": "thresh",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Threshold value we used."
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Adaptive thresholded image."
        }
      }
    },
    "Image_Blurring_Average": {
      "type": "Image_Blurring_Average",
      "category": "function",
      "title": "image blurring average",
      "tooltip": "Blurs an image using the normalized box filter.",
      "externalImports": "import cv2 as cv",
      "sourceCode": "{{indent}}{{{outputs.1}}} = cv.blur({{{inputs.1}}},{{{inputs.2}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'rgb', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-255', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image"
        },
        "ksize": {
          "title": "kernel_size",
          "dataType": "tuple",
          "defaultValue": "(5,5)",
          "tooltip": "blurring kernel size."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Smoothing image using normalized box kernel."
        }
      }
    },

    "Image_Pyramid_Upsample": {
      "type": "Image_Pyramid_Upsample",
      "category": "function",
      "title": "image pyramid upsample",
      "tooltip": "Upsamples an image and then blurs it.",
      "externalImports": "import cv2 as cv",
      "sourceCode": "{{indent}}{{{outputs.1}}} = cv.pyrUp({{{inputs.1}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'rgb', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-255', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Upsampled image."
        }
      }
    }
  }
}
