{
  "description": "Image read and write functions from torchvision.io",
  "enable": true,
  "nodes": {
    "read_image": {
      "type": "read_image",
      "category": "function",
      "title": "read_image",
      "tooltip": "Reads a JPEG or PNG image into a 3 dimensional RGB or grayscale Tensor. Optionally converts the image to the desired format. The values of the output tensor are uint8 in [0, 255].",
      "externalImports": "from torchvision import io\nfrom torchvision.io import ImageReadMode",
      "sourceCode": "{{indent}}{{{outputs.1}}} = io.read_image({{{inputs.1}}}, {{{inputs.2}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}, 'dataType': 'torch.tensor', 'metadata': {'colorSpace': 'rgb', 'channelOrder': 'first', 'isBatched': False, 'intensityRange': '0-255', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "tooltip": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "path": {
          "title": "path",
          "dataType": "string",
          "tooltip": "path(str) - path of the JPEG or PNG image."
        },
        "mode": {
          "title": "mode",
          "dataType": "imageio.ImageReadMode",
          "default": "ImageReadMode.UNCHANGED",
          "tooltip": "mode(ImageReadMode) - The read mode used for optionally converting the image. Default: ImageReadMode.UNCHANGED."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "tooltip": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "torch.tensor"
          },
          "tooltip": "{dataType: torch.tensor, value, layout: [chw], colorMode: [rgb, grayscale], intensityRange: 0-255' device: cpu}"
        }
      }
    },
    "write_jpeg": {
      "type": "write_jpeg",
      "category": "function",
      "title": "write_jpeg",
      "tooltip": "Takes an input tensor in CHW layout and saves it in a JPEG file.",
      "externalImports": "from torchvision import io",
      "functionName": "io.write_jpeg",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "tooltip": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "input": {
          "title": "input",
          "dataType": "torch.tensor",
          "tooltip": "input (Tensor[channels, image_height, image_width]) - int8 image tensor of c channels, where c must be 1 or 3."
        },
        "filename": {
          "title": "filename",
          "dataType": "string",
          "defaultValue": "",
          "tooltip": "filename(str) - Path to save the image."
        },

        "quality": {
          "title": "quality",
          "dataType": "integer",
          "defaultValue": "75",
          "tooltip": "quality (int) - Quality of the resulting JPEG file, it must be a number between 1 and 100. Default: 75"
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "tooltip": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        }
      }
    }
  },
  "types": {
    "ImageReadMode": {
      "options": {
        "UNCHANGED": "ImageReadMode.UNCHANGED",
        "GRAY ": " ImageReadMode.GRAY",
        "GRAY_ALPHA": "ImageReadMode.GRAY_ALPHA",
        "RGB": "ImageReadMode.RGB",
        "RGB_ALPHA": "ImageReadMode.RGB_ALPHA"
      },
      "default": "UNCHANGED",
      "widget": "EnumSelect"
    }
  },
  "imageTypeConversion": {
    "torch.tensor": {
      "torch.tensor": {
        "function_definition": "def tensor2tensor(src_image, dest_metadata_list):\n    import torch\n\n    def find_matched_colorspace(src_metadata, dest_metadata_list):\n        # Same as the previous function, as this logic is independent of the data format\n        for metadata in dest_metadata_list:\n            if metadata[\"colorSpace\"] == src_metadata[\"colorSpace\"]:\n                return metadata\n\n        if src_metadata[\"colorSpace\"] in [\"grb\", \"gbr\"]:\n            for metadata in dest_metadata_list:\n                if metadata[\"colorSpace\"] in [\"rgb\", \"gbr\"]:\n                    return metadata\n\n        return dest_metadata_list[0]\n\n    src_metadata = src_image[\"metadata\"]\n    dest_metadata = find_matched_colorspace(src_metadata, dest_metadata_list)\n\n    # Make a copy of the source image\n    image = src_image[\"value\"].clone()\n\n    # Handle batched images\n    if src_metadata.get(\"isBatched\", False):\n        batch_dim = 0\n    else:\n        batch_dim = None\n\n    # Convert color space\n    if (\n        src_metadata[\"colorSpace\"] == \"grayscale\"\n        and dest_metadata[\"colorSpace\"] == \"grayscale\"\n    ):\n        pass  # No need for conversion\n    elif (\n        src_metadata[\"colorSpace\"] == \"grayscale\"\n        and dest_metadata[\"colorSpace\"] != \"grayscale\"\n    ):\n        image = image.unsqueeze(-1).repeat(1, 1, 1, 3)\n    elif (\n        src_metadata[\"colorSpace\"] != \"grayscale\"\n        and dest_metadata[\"colorSpace\"] == \"grayscale\"\n    ):\n        if src_metadata[\"channelOrder\"] == \"first\":\n            if src_metadata[\"colorSpace\"] == \"rgb\":\n                weights = (\n                    torch.tensor([0.299, 0.587, 0.114])\n                    .unsqueeze(-1)\n                    .unsqueeze(-1)\n                    .to(image.device)\n                )\n            else:  # gbr\n                weights = (\n                    torch.tensor([0.587, 0.114, 0.299])\n                    .unsqueeze(-1)\n                    .unsqueeze(-1)\n                    .to(image.device)\n                )\n            if batch_dim is not None:\n                image = (image * weights).sum(dim=1)\n            else:\n                image = (image * weights).sum(dim=0)\n        else:\n            if src_metadata[\"colorSpace\"] == \"rgb\":\n                weights = torch.tensor([0.299, 0.587, 0.114]).to(image.device)\n            else:  # gbr\n                weights = torch.tensor([0.587, 0.114, 0.299]).to(image.device)\n            if batch_dim is not None:\n                image = (image * weights).sum(dim=3)\n            else:\n                image = (image * weights).sum(dim=2)\n\n    elif src_metadata[\"colorSpace\"] == \"gbr\" and dest_metadata[\"colorSpace\"] == \"rgb\":\n        if src_metadata[\"channelOrder\"] == \"last\":\n            if batch_dim is not None:\n                image = image[..., [2, 0, 1]]\n            else:\n                image = image[:, :, [2, 0, 1]]\n        elif src_metadata[\"channelOrder\"] == \"first\":\n            if batch_dim is not None:\n                image = image[:, [2, 0, 1], :, :]\n            else:\n                image = image[[2, 0, 1], :, :]\n\n    elif src_metadata[\"colorSpace\"] == \"rgb\" and dest_metadata[\"colorSpace\"] == \"gbr\":\n        if src_metadata[\"channelOrder\"] == \"last\":\n            if batch_dim is not None:\n                image = image[..., [1, 2, 0]]\n            else:\n                image = image[:, :, [1, 2, 0]]\n        elif src_metadata[\"channelOrder\"] == \"first\":\n            if batch_dim is not None:\n                image = image[:, [1, 2, 0], :, :]\n            else:\n                image = image[[1, 2, 0], :, :]\n\n    # Adjust intensity range\n    if (\n        src_metadata[\"intensityRange\"] == \"0-255\"\n        and dest_metadata[\"intensityRange\"] == \"0-1\"\n    ):\n        image = image.float() / 255.0\n    elif (\n        src_metadata[\"intensityRange\"] == \"0-1\"\n        and dest_metadata[\"intensityRange\"] == \"0-255\"\n    ):\n        image = image * 255\n\n    # Adjust channel order\n    if (\n        src_metadata[\"channelOrder\"] == \"first\"\n        and dest_metadata[\"channelOrder\"] == \"last\"\n    ):\n        if batch_dim is not None:\n            image = image.permute(batch_dim, 2, 3, 1)\n        else:\n            image = image.permute(1, 2, 0)\n    elif (\n        src_metadata[\"channelOrder\"] == \"last\"\n        and dest_metadata[\"channelOrder\"] == \"first\"\n    ):\n        if batch_dim is not None:\n            image = image.permute(batch_dim, 3, 1, 2)\n        else:\n            image = image.permute(2, 0, 1)\n\n    # Handle batched destination image\n    if dest_metadata.get(\"isBatched\", False) and not src_metadata.get(\n        \"isBatched\", False\n    ):\n        image = image.unsqueeze(0)\n    elif not dest_metadata.get(\"isBatched\", False) and src_metadata.get(\n        \"isBatched\", False\n    ):\n        image = image.squeeze(0)\n\n    if dest_metadata[\"channelOrder\"] == \"none\":\n        if src_metadata[\"channelOrder\"] == \"first\":\n            image = image.squeeze(0)\n\n    # Create destination image with new metadata and converted values\n    dest_image = {\n        \"dataType\": src_image[\"dataType\"],\n        \"value\": image,\n        \"metadata\": dest_metadata,\n    }\n\n    return dest_image",
        "function_name": "tensor2tensor"
      },
      "numpy.ndarray": {
        "function_definition": "def tensor2ndarray(src_image):\n  import copy\n  numpy_image = copy.deepcopy(src_image['value'].cpu().numpy())\n  return {\n       'dataType': 'numpy.ndarray',\n       'value': numpy_image,\n       'metadata': src_image['metadata']\n  }",
        "function_name": "tensor2ndarray"
      }
    }
  }
}
