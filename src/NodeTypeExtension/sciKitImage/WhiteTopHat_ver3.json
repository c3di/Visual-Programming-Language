{
    "enable": true,
    "nodes": {
      "White_Tophat": {
        "type": "White_Tophat",
        "category": "function",
        "title": "white top hat",
        "tooltip": "The white top hat of an image is defined as the image minus its morphological opening. ",
        "externalImports": "from skimage.morphology import white_tophat",
        "codeGenerator": "function code(inputs, outputs, node, generator) {\r\n  // Begin Python code generation\r\n  const code = `from enum import Enum\r\n\r\n# Variable for specifying the output device\r\noutput_device = 'cpu'\r\n\r\n# Enums for different image metadata configurations\r\nclass ImageMetadata(Enum):\r\n    BINARY = {\r\n        'colorChannel': 'grayscale',\r\n        'channelOrder': 'none',\r\n        'isMiniBatched': False,\r\n        'intensityRange': '0-1'\r\n    }\r\n    GRAYSCALE = {\r\n        'colorChannel': 'grayscale',\r\n        'channelOrder': 'none',\r\n        'isMiniBatched': False,\r\n        'intensityRange': '0-255'\r\n    }\r\n    RGB = {\r\n        'colorChannel': 'rgb',\r\n        'channelOrder': 'channelLast',\r\n        'isMiniBatched': False,\r\n        'intensityRange': '0-255'\r\n    }\r\n    GBR = {\r\n        'colorChannel': 'gbr',\r\n        'channelOrder': 'channelLast',\r\n        'isMiniBatched': False,\r\n        'intensityRange': '0-255'\r\n    }\r\n\r\n# Function to determine the type of image metadata\r\ndef determine_metadata(meta):\r\n    for metadata in ImageMetadata:\r\n        if all(meta.get(key) == metadata.value.get(key) for key in metadata.value if key != 'device'):\r\n            return metadata\r\n    raise ValueError('Error: Unsupported or invalid image metadata configuration')\r\n\r\n# Function to extract and convert metadata\r\ndef convert_metadata():\r\n    # Replace these placeholders with the actual values from your other script\r\n    color_channel = ${inputs[1]}['metadata']['colorChannel']\r\n    channel_order = ${inputs[1]}['metadata']['channelOrder']\r\n    is_mini_batched = ${inputs[1]}['metadata']['isMiniBatched']\r\n    intensity_range = ${inputs[1]}['metadata']['intensityRange']\r\n    device = ${inputs[1]}['metadata']['device']\r\n\r\n    meta = {\r\n        'colorChannel': color_channel,\r\n        'channelOrder': channel_order,\r\n        'isMiniBatched': is_mini_batched,\r\n        'intensityRange': intensity_range,\r\n        'device': device\r\n    }\r\n\r\n    # Overwrite the device with the output device\r\n    meta['device'] = output_device\r\n\r\n    metadata_type = determine_metadata(meta)\r\n    if metadata_type is None:\r\n        raise ValueError('Error: None value encountered for metadata type')\r\n\r\n    output_meta = None\r\n    if metadata_type == ImageMetadata.BINARY:\r\n        output_meta = ImageMetadata.BINARY.value\r\n    elif metadata_type == ImageMetadata.GRAYSCALE:\r\n        output_meta = ImageMetadata.GRAYSCALE.value\r\n    elif metadata_type == ImageMetadata.RGB:\r\n        output_meta = ImageMetadata.RGB.value\r\n    elif metadata_type == ImageMetadata.GBR:\r\n        output_meta = ImageMetadata.GBR.value\r\n    else:\r\n        raise ValueError('Error: Unhandled image metadata type')\r\n\r\n    # Ensure the output metadata uses the output device\r\n    output_meta['device'] = output_device\r\n    return output_meta\r\n${outputs[1]} = white_tophat(${inputs[1]}['value'], footprint=${inputs[2]}, out=${inputs[3]})\r\n${outputs[1]} = {\r\n  'value': ${outputs[1]},\r\n  'dataType': 'numpy.ndarray',\r\n  'metadata': {\r\n    'colorChannel': convert_metadata().get('colorChannel'),\r\n    'channelOrder': convert_metadata().get('channelOrder'),\r\n    'isMiniBatched': convert_metadata().get('isMiniBatched'),\r\n    'intensityRange': convert_metadata().get('intensityRange'),\r\n    'device': convert_metadata().get('device')\r\n  }\r\n}\r\n${outputs[0]}`;\r\n  return code;\r\n}",
        "inputs": {
          "execIn": {
            "title": "execIn",
            "dataType": "exec",
            "showWidget": false,
            "showTitle": false
          },
          "image": {
            "title": "image",
            "dataType": "image",
            "defaultValue": {
              "dataType": "numpy.ndarray",
              "metadata": [
                {
                  "colorChannel": "grayscale",
                  "channelOrder": "none",
                  "isMiniBatched": false,
                  "intensityRange": "0-1"
                },
                {
                  "colorChannel": "grayscale",
                  "channelOrder": "none",
                  "isMiniBatched": false,
                  "intensityRange": "0-255"
                },
                {
                  "colorChannel": "rgb",
                  "channelOrder": "channelLast",
                  "isMiniBatched": false,
                  "intensityRange": "0-255"
                },
                {
                  "colorChannel": "gbr",
                  "channelOrder": "channelLast",
                  "isMiniBatched": false,
                  "intensityRange": "0-255"
                }
              ]
            },
            "tooltip": "Image array."
          },
          "footprint": {
            "title": "footprint",
            "dataType": "numpy.ndarray",
            "defaultValue": "None",
            "tooltip": "The neighborhood expressed as a 2-D array of 1’s and 0’s."
          },
          "out": {
            "title": "out",
            "dataType": "numpy.ndarray",
            "defaultValue": "None",
            "tooltip": "The array to store the result of the morphology."
          }
        },
        "outputs": {
          "execOut": {
            "title": "execOut",
            "dataType": "exec",
            "showWidget": false,
            "showTitle": false
          },
          "image": {
            "title": "image",
            "dataType": "image",
            "defaultValue": {
              "dataType": "numpy.ndarray",
              "metadata": [
                {
                  "colorChannel": "grayscale",
                  "channelOrder": "none",
                  "isMiniBatched": false,
                  "intensityRange": "0-1"
                },
                {
                  "colorChannel": "grayscale",
                  "channelOrder": "none",
                  "isMiniBatched": false,
                  "intensityRange": "0-255"
                },
                {
                  "colorChannel": "rgb",
                  "channelOrder": "channelLast",
                  "isMiniBatched": false,
                  "intensityRange": "0-255"
                },
                {
                  "colorChannel": "gbr",
                  "channelOrder": "channelLast",
                  "isMiniBatched": false,
                  "intensityRange": "0-255"
                }
              ]
            },
            "tooltip": "The result of the morphological white top hat."
          }
        }
      }
    }
  }