{
  "enable": true,
  "nodes": {
    "White_Tophat": {
      "type": "White_Tophat",
      "category": "function",
      "title": "white top hat",
      "tooltip": "The white top hat of an image is defined as the image minus its morphological opening. ",
      "externalImports": "from skimage import morphology",
      "sourceCode": "{{indent}}{{{outputs.1}}} = morphology.white_tophat({{{inputs.1}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Image array."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "The result of the morphological white top hat."
        }
      }
    },
    "Black_Tophat": {
      "type": "Black_Tophat",
      "category": "function",
      "title": "black top hat",
      "tooltip": "The black top hat of an image is defined as its morphological closing minus the original image. ",
      "externalImports": "from skimage import morphology",
      "sourceCode": "{{indent}}{{{outputs.1}}} = black_tophat({{{inputs.1}}},{{{inputs.2}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Image array."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "The result of the morphological black top hat."
        }
      }
    },
    "Hysteresis_Threshold": {
      "type": "Hysteresis_Threshold",
      "category": "function",
      "title": "hysteresis threshold",
      "tooltip": "Apply hysteresis thresholding to image.",
      "externalImports": "from skimage import filters",
      "sourceCode": "{{indent}}{{{outputs.1}}} = filters.apply_hysteresis_threshold({{{inputs.1}}},{{{inputs.2}}},{{{inputs.3}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Image array."
        },
        "low": {
          "title": "low",
          "dataType": "float",
          "defaultValue": 1.5,
          "tooltip": "Lower threshold."
        },
        "high": {
          "title": "high",
          "dataType": "float",
          "defaultValue": 2.5,
          "tooltip": "Higher threshold."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Array in which True indicates the locations where image was above the hysteresis threshold."
        }
      }
    },
    "Unsharp_Mask": {
      "type": "Unsharp_Mask",
      "category": "function",
      "title": "unsharp mask",
      "tooltip": "Unsharp masking filter.",
      "externalImports": "from skimage.filters import unsharp_mask",
      "sourceCode": "{{indent}}{{{outputs.1}}} = unsharp_mask({{{inputs.1}}},{{{inputs.2}}},{{{inputs.3}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Image array."
        },
        "radius": {
          "title": "low",
          "dataType": "float",
          "defaultValue": 20.0,
          "tooltip": "The radius is used for all dimensions."
        },
        "amount": {
          "title": "high",
          "dataType": "float",
          "defaultValue": 1.0,
          "tooltip": "The details will be amplified with this factor."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Image with unsharp mask applied."
        }
      }
    },
    "Mean_Percentile": {
      "type": "Mean_Percentile",
      "category": "function",
      "title": "mean percentile",
      "tooltip": "Return local mean of an image.",
      "externalImports": "from skimage.filters import rank",
      "sourceCode": "{{indent}}{{{outputs.1}}} = rank.mean_percentile({{{inputs.1}}},{{{inputs.2}}},{{{inputs.3}}},{{{inputs.4}}},{{{inputs.5}}},{{{inputs.6}}},{{{inputs.7}}},{{{inputs.8}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image."
        },
        "footprint": {
          "title": "footprint",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "The neighborhood expressed as a 2-D array of 1’s and 0’s"
        },
        "out": {
          "title": "out",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "If None, a new array is allocated."
        },
        "mask": {
          "title": "mask",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "Mask array that defines (>0) area of the image included in the local neighborhood. If None, the complete image is used (default)."
        },
        "shift_x": {
          "title": "shift_x",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Offset added to the footprint center point. Shift is bounded to the footprint sizes (center must be inside the given footprint)."
        },
        "shift_y": {
          "title": "shift_y",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Offset added to the footprint center point. Shift is bounded to the footprint sizes (center must be inside the given footprint)."
        },
        "p0": {
          "title": "p0",
          "dataType": "float",
          "defaultValue": 0.0,
          "tooltip": "Define the [p0, p1] percentile interval to be considered for computing the value."
        },
        "p1": {
          "title": "p1",
          "dataType": "float",
          "defaultValue": 1.0,
          "tooltip": "Define the [p0, p1] percentile interval to be considered for computing the value."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Image with local mean applied."
        }
      }
    },
    "Mean_Bilateral": {
      "type": "Mean_Bilateral",
      "category": "function",
      "title": "mean bilateral",
      "tooltip": "Apply a flat kernel bilateral filter. This is an edge-preserving and noise reducing denoising filter.",
      "externalImports": "from skimage.filters import rank",
      "sourceCode": "{{indent}}{{{outputs.1}}} = rank.mean_bilateral({{{inputs.1}}},{{{inputs.2}}},{{{inputs.3}}},{{{inputs.4}}},{{{inputs.5}}},{{{inputs.6}}},{{{inputs.7}}},{{{inputs.8}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image."
        },
        "footprint": {
          "title": "footprint",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "The neighborhood expressed as a 2-D array of 1’s and 0’s"
        },
        "out": {
          "title": "out",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "If None, a new array is allocated."
        },
        "mask": {
          "title": "mask",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "Mask array that defines (>0) area of the image included in the local neighborhood. If None, the complete image is used (default)."
        },
        "shift_x": {
          "title": "shift_x",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Offset added to the footprint center point. Shift is bounded to the footprint sizes (center must be inside the given footprint)."
        },
        "shift_y": {
          "title": "shift_y",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Offset added to the footprint center point. Shift is bounded to the footprint sizes (center must be inside the given footprint)."
        },
        "s0": {
          "title": "s0",
          "dataType": "integer",
          "defaultValue": 500,
          "tooltip": "Define the [s0, s1] interval around the grayvalue of the center pixel to be considered for computing the value."
        },
        "s1": {
          "title": "s1",
          "dataType": "integer",
          "defaultValue": 500,
          "tooltip": "Define the [s0, s1] interval around the grayvalue of the center pixel to be considered for computing the value."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Output image."
        }
      }
    },
    "Mean": {
      "type": "Mean",
      "category": "function",
      "title": "mean",
      "tooltip": "Return local mean of an image.",
      "externalImports": "from skimage.filters import rank",
      "sourceCode": "{{indent}}{{{outputs.1}}} = rank.mean({{{inputs.1}}},{{{inputs.2}}},{{{inputs.3}}},{{{inputs.4}}},{{{inputs.5}}},{{{inputs.6}}},{{{inputs.7}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image."
        },
        "footprint": {
          "title": "footprint",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "The neighborhood expressed as a 2-D array of 1’s and 0’s"
        },
        "out": {
          "title": "out",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "If None, a new array is allocated."
        },
        "mask": {
          "title": "mask",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "Mask array that defines (>0) area of the image included in the local neighborhood. If None, the complete image is used (default)."
        },
        "shift_x": {
          "title": "shift_x",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Offset added to the footprint center point. Shift is bounded to the footprint sizes (center must be inside the given footprint)."
        },
        "shift_y": {
          "title": "shift_y",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Offset added to the footprint center point. Shift is bounded to the footprint sizes (center must be inside the given footprint)."
        },
        "shift_z": {
          "title": "shift_z",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Offset added to the footprint center point. Shift is bounded to the footprint sizes (center must be inside the given footprint)."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Output image."
        }
      }
    },
    "Denoise_tv_chambolle": {
      "type": "Denoise_tv_chambolle",
      "category": "function",
      "title": "denoise tv chambolle",
      "tooltip": "Perform total variation denoising in nD.",
      "externalImports": "from skimage.restoration import denoise_tv_chambolle",
      "sourceCode": "{{indent}}{{{outputs.1}}} = denoise_tv_chambolle({{{inputs.1}}},{{{inputs.2}}},{{{inputs.3}}},{{{inputs.4}}},{{{inputs.5}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image to be denoised."
        },
        "weight": {
          "title": "weight",
          "dataType": "float",
          "defaultValue": 0.1,
          "tooltip": "Denoising weight."
        },
        "eps": {
          "title": "eps",
          "dataType": "float",
          "defaultValue": "None",
          "tooltip": "Tolerance for the stop criterion"
        },
        "max_num_iter": {
          "title": "max_num_iter",
          "dataType": "integer",
          "defaultValue": 20,
          "tooltip": "Maximal number of iterations used for the optimization."
        },
        "channel_axis": {
          "title": "channel_axis",
          "dataType": "integer",
          "defaultValue": -1,
          "tooltip": "If None, the image is assumed to be grayscale (single-channel). Otherwise, this parameter indicates which axis of the array corresponds to channels."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Denoised image."
        }
      }
    },
    "Denoise_bilateral": {
      "type": "Denoise_bilateral",
      "category": "function",
      "title": "denoise bilateral filter",
      "tooltip": "Denoise image using bilateral filter.",
      "externalImports": "from skimage.restoration import denoise_bilateral",
      "sourceCode": "{{indent}}{{{outputs.1}}} = denoise_bilateral({{{inputs.1}}},{{{inputs.2}}},{{{inputs.3}}},{{{inputs.4}}},{{{inputs.5}}},{{{inputs.6}}},{{{inputs.7}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image to be denoised."
        },
        "win_size": {
          "title": "win_size",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Window size for filtering. If win_size is not specified, it is calculated as max(5, 2 * ceil(3 * sigma_spatial) + 1)."
        },
        "sigma_color": {
          "title": "sigma_color",
          "dataType": "float",
          "defaultValue": 0.05,
          "tooltip": "Standard deviation for grayvalue/color distance (radiometric similarity). "
        },
        "sigma_spatial": {
          "title": "sigma_color",
          "dataType": "float",
          "defaultValue": 15.0,
          "tooltip": "Standard deviation for range distance."
        },
        "bins": {
          "title": "bins",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "Number of discrete values for Gaussian weights of color filtering."
        },
        "mode": {
          "title": "mode",
          "dataType": "string",
          "defaultValue": "constant",
          "tooltip": "How to handle values outside the image borders,{'constant', 'edge', 'symmetric', 'reflect', 'wrap'}"
        },
        "cval": {
          "title": "cval",
          "dataType": "float",
          "defaultValue": "None",
          "tooltip": "Used in conjunction with mode 'constant', the value outside the image boundaries."
        },
        "channel_axis": {
          "title": "channel_axis",
          "dataType": "integer",
          "defaultValue": -1,
          "tooltip": "If None, the image is assumed to be grayscale (single-channel). Otherwise, this parameter indicates which axis of the array corresponds to channels."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Denoised image."
        }
      }
    },
    "Denoise_wavelet": {
      "type": "Denoise_wavelet",
      "category": "function",
      "title": "denoise wavelet filter",
      "tooltip": "Denoise image using wavelet filter.",
      "externalImports": "from skimage.restoration import denoise_wavelet",
      "sourceCode": "{{indent}}{{{outputs.1}}} = denoise_wavelet({{{inputs.1}}},{{{inputs.2}}},{{{inputs.3}}},{{{inputs.4}}},{{{inputs.5}}},{{{inputs.6}}},{{{inputs.7}}},{{{inputs.8}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image to be denoised."
        },
        "sigma": {
          "title": "sigma",
          "dataType": "float",
          "defaultValue": "None",
          "tooltip": "The noise standard deviation used when computing the wavelet detail coefficient threshold(s). "
        },
        "wavelet": {
          "title": "wavelet",
          "dataType": "string",
          "defaultValue": "db1",
          "tooltip": "The type of wavelet to perform and can be any of the options pywt.wavelist outputs. "
        },
        "mode": {
          "title": "mode",
          "dataType": "string",
          "defaultValue": "None",
          "tooltip": "An optional argument to choose the type of denoising performed,{'soft', 'hard'},"
        },
        "wavelet_levels": {
          "title": "wavelet_levels",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "The number of wavelet decomposition levels to use."
        },
        "convert2ycbcr": {
          "title": "convert2ycbcr",
          "dataType": "boolean",
          "defaultValue": "None",
          "tooltip": "If True and channel_axis is set, do the wavelet denoising in the YCbCr colorspace instead of the RGB color space. "
        },
        "method": {
          "title": "method",
          "dataType": "string",
          "defaultValue": "BayesShrink",
          "tooltip": "Thresholding method to be used,{'BayesShrink', 'VisuShrink'}"
        },
        "rescale_sigma": {
          "title": "rescale_sigma",
          "dataType": "boolean",
          "defaultValue": "None",
          "tooltip": "If False, no rescaling of the user-provided sigma will be performed. "
        },
        "channel_axis": {
          "title": "channel_axis",
          "dataType": "integer",
          "defaultValue": -1,
          "tooltip": "If None, the image is assumed to be grayscale (single-channel). Otherwise, this parameter indicates which axis of the array corresponds to channels."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Denoised image."
        }
      }
    },
    "Filters_rank_mean": {
      "type": "Filters_rank_mean",
      "category": "function",
      "title": "filters_rank_mean",
      "tooltip": "Return local mean of an image.",
      "externalImports": "from skimage.filters.rank import mean",
      "sourceCode": "{{indent}}{{{outputs.1}}} = mean({{{inputs.1}}},{{{inputs.2}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image"
        },
        "footprint": {
          "title": "footprint",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "The neighborhood expressed as an ndarray of 1's and 0's."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Local mean of an image."
        }
      }
    },
    "Img_as_unit": {
      "type": "Img_as_unit",
      "category": "function",
      "title": "img_as_unit",
      "tooltip": "Convert an image to 16-bit unsigned integer format.",
      "externalImports": "from skimage.util import img_as_uint",
      "sourceCode": "{{indent}}{{{outputs.1}}} = img_as_uint({{{inputs.1}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray",
            "metadata": [
              {
                "colorChannel": "rgb",
                "isMiniBatched": true,
                "channelOrder": "channelFirst",
                "intensityRange": "0-1"
              }
            ]
          },
          "tooltip": "Input image"
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "image": {
          "title": "image",
          "dataType": "image",
          "defaultValue": {
            "dataType": "numpy.ndarray"
          },
          "tooltip": "Output image of uint16."
        }
      }
    },
    "Morphology_disk": {
      "type": "Morphology_disk",
      "category": "function",
      "title": "morphology_disk",
      "tooltip": "Generates a flat, disk-shaped footprint.",
      "externalImports": "from skimage.morphology import disk",
      "sourceCode": "{{indent}}{{{outputs.1}}} = disk({{{inputs.1}}})\n{{indent}}{{{outputs.1}}} = {'value': {{{outputs.1}}}[0], 'dataType': 'numpy.ndarray', 'metadata': {'colorChannel': 'grayscale', 'channelOrder': 'channelFirst', 'isMiniBatched': True, 'intensityRange': '0-1', 'device': 'cpu'}}\n{{{outputs.0}}}",
      "inputs": {
        "execIn": {
          "title": "execIn",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "radius": {
          "title": "radius",
          "dataType": "integer",
          "defaultValue": "None",
          "tooltip": "The radius of the disk-shaped footprint."
        }
      },
      "outputs": {
        "execOut": {
          "title": "execOut",
          "dataType": "exec",
          "showWidget": false,
          "showTitle": false
        },
        "footprint": {
          "title": "footprint",
          "dataType": "numpy.ndarray",
          "defaultValue": "None",
          "tooltip": "The footprint where elements of the neighborhood are 1 and 0 otherwise."
        }
      }
    }
  }
}
